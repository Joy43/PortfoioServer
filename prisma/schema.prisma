// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserStatus {
  ACTIVE
  BLOCKED
  DELETED
}

enum UserRole {
  USER
  PREMIUM
  ADMIN
}

model User {
  id           String     @id @default(uuid())
  fullName     String?
  email        String     @unique
  password     String
  role         UserRole   @default(USER)
  status       UserStatus @default(ACTIVE)
  isDeleted    Boolean    @default(false)
  premiumUntil DateTime?
  posts        Post[]
  project      Project[]
  comments     Comment[]
  ratings      Rating[]
  votes        Vote[]
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}
model Post {
  id          String     @id @default(uuid())
  title       String
  description String
  location    String
  image       String
  language    String?
  categoryId  String
  category    ProjectCategory @relation(fields: [categoryId], references: [id])
  userId      String
  user        User       @relation(fields: [userId], references: [id])
  comments    Comment[]
  ratings     Rating[]
  votes       Vote[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id        String   @id @default(uuid())
  text      String
  userId    String
  postId    String
  user      User     @relation(fields: [userId], references: [id])
  post      Post     @relation(fields: [postId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Rating {
  id        String   @id @default(uuid())
  value     Int
  userId    String
  postId    String
  user      User     @relation(fields: [userId], references: [id])
  post      Post     @relation(fields: [postId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Vote {
  id        String     @id @default(uuid())
  status    VoteStatus
  userId    String
  postId    String
  user      User       @relation(fields: [userId], references: [id])
  post      Post       @relation(fields: [postId], references: [id])
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

enum VoteStatus {
  UPVOTE
  DOWNVOTE
}

model ProjectCategory {
  id        String    @id @default(uuid())
  name      String    @unique
  image     String
  project   Project[]
  post       Post[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Project {
  id          String          @id @default(uuid())
  title       String
  description String
  image       String
  categoryId  String
  languages   String
  livelink    String
  githublink  String
  gitclient   String?
  gitserver   String?
  category    ProjectCategory @relation(fields: [categoryId], references: [id])
  userId      String
  user        User            @relation(fields: [userId], references: [id])
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
}
